.include "m16def.inc"

.def temp1 = r17
.def temp2 = r16
.def leds = r18

start:
	ldi r24,LOW(RAMEND)												; initialize stack
	out SPL,r24
	ldi r25,HIGH(RAMEND)
	out SPH,r25

	ldi r24 ,0xFF													; PORTA as output
	out DDRA ,r24
	ldi r24 ,(1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4)      						; θέτει ως εξόδους τα 4 MSB
	out DDRC ,r24													; της θύρας PORTC													
read_loop:															; we wait the number of our team '15'
	call scan_keypad
	ldi temp1, 0x10
	and temp1,r25
	sbrs temp1,5													; we wait till number '1' is pressed
	jmp read_loop													; if 'no' we read again
	mov temp2,r25													; if 'yes' we keep current state of buttons
	mov temp1,r24
iner_loop:
	call scan_keypad
	cp r24,temp1													; if r24 is increased that means a new button is pressed 
	breq state1														; that is not '5' so we jump to start
	brlo state1
	jmp read_loop
state1:																; buttons on r24 have not changed
	mov temp1,r24
	cp r25,temp2
	breq state2														; if r25 is increased that means a new button is pressed
	brlo state2
	and r25,temp2
	cpi r25,0x02
	breq open_close_leds											; if that button is '5' we found the combination!
	jmp read_loop													; else we read again
state2:
	mov temp2,r25													; buttons on r25 have not changed
	jmp iner_loop
open_close_leds:
	ldi temp1,0x0A													; we turn on and off the leds 10 times with delay
leds_loop:
	rcall on
	ldi r24 , low(250)												; 0.25 sec delay
	ldi r25 , high(250)	
	rcall wait_msec 
	rcall off
	ldi r24 , low(250)												; 0.25 sec delay
	ldi r25 , high(250)	
	rcall wait_msec
	dec temp1
	cpi temp1,0x00
	breq read_loop
	jmp leds_loop


on:
	ser leds														;turn on leds
	out PORTA,leds
	ret

off:																;turn off leds
	clr leds
	out PORTA,leds
	ret



scan_row:
	ldi r25 ,0x08													; αρχικοποίηση με ‘0000 1000’
back_: lsl r25														; αριστερή ολίσθηση του ‘1’ τόσες θέσεις
	dec r24															; όσος είναι ο αριθμός της γραμμής
	brne back_
	out PORTC ,r25													; η αντίστοιχη γραμμή τίθεται στο λογικό ‘1’
	nop
	nop																; καθυστέρηση για να προλάβει να γίνει η αλλαγή κατάστασης
	in r24 ,PINC													; επιστρέφουν οι θέσεις (στήλες) των διακοπτών που είναι πιεσμένοι
	andi r24 ,0x0f													; απομονώνονται τα 4 LSB όπου τα ‘1’ δείχνουν που είναι πατημένοι
	ret																; οι διακόπτες.

scan_keypad:
	ldi r24 ,0x01													; έλεγξε την πρώτη γραμμή του πληκτρολογίου
	rcall scan_row
	swap r24														; αποθήκευσε το αποτέλεσμα
	mov r27 ,r24													; στα 4 msb του r27
	ldi r24 ,0x02													; έλεγξε τη δεύτερη γραμμή του πληκτρολογίου
	rcall scan_row
	add r27 ,r24													; αποθήκευσε το αποτέλεσμα στα 4 lsb του r27
	ldi r24 ,0x03													; έλεγξε την τρίτη γραμμή του πληκτρολογίου
	rcall scan_row
	swap r24														; αποθήκευσε το αποτέλεσμα
	mov r26 ,r24													; στα 4 msb του r26
	ldi r24 ,0x04													; έλεγξε την τέταρτη γραμμή του πληκτρολογίου
	rcall scan_row
	add r26 ,r24													; αποθήκευσε το αποτέλεσμα στα 4 lsb του r26
	movw r24 ,r26													; μετέφερε το αποτέλεσμα στους καταχωρητές r25:r24
	ret


keypad_to_ascii:													; λογικό ‘1’ στις θέσεις του καταχωρητή r26 δηλώνουν
	movw r26 ,r24													; τα παρακάτω σύμβολα και αριθμούς
	ldi r24 ,'*'
	sbrc r26 ,0
	ret
	ldi r24 ,'0'
	sbrc r26 ,1
	ret
	ldi r24 ,'#'
	sbrc r26 ,2
	ret
	ldi r24 ,'D'
	sbrc r26 ,3														; αν δεν είναι ‘1’παρακάμπτει την ret, αλλιώς (αν είναι ‘1’)
	ret																; επιστρέφει με τον καταχωρητή r24 την ASCII τιμή του D.
	ldi r24 ,'7'
	sbrc r26 ,4
	ret
	ldi r24 ,'8'
	sbrc r26 ,5
	ret
	ldi r24 ,'9'
	sbrc r26 ,6
	ret
	ldi r24 ,'C'
	sbrc r26 ,7
	ret
	ldi r24 ,'4'													; λογικό ‘1’ στις θέσεις του καταχωρητή r27 δηλώνουν
	sbrc r27 ,0														; τα παρακάτω σύμβολα και αριθμούς
	ret
	ldi r24 ,'5'
	sbrc r27 ,1
	ret
	ldi r24 ,'6'
	sbrc r27 ,2
	ret
	ldi r24 ,'B'
	sbrc r27 ,3
	ret
	ldi r24 ,'1'
	sbrc r27 ,4
	ret
	ldi r24 ,'2'
	sbrc r27 ,5
	ret
	ldi r24 ,'3'
	sbrc r27 ,6
	ret
	ldi r24 ,'A'
	sbrc r27 ,7
	ret
	clr r24
	ret


wait_usec:
   sbiw r24 ,1														; 2 κύκλοι (0.250 μsec)
   nop																; 1 κύκλος (0.125 μsec)
   nop																; 1 κύκλος (0.125 μsec)
   nop																; 1 κύκλος (0.125 μsec)
   nop																; 1 κύκλος (0.125 μsec)
   brne wait_usec													; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
   ret																; 4 κύκλοι (0.500 μsec)

wait_msec:
   push r24															; 2 κύκλοι (0.250 μsec)
   push r25															; 2 κύκλοι
   ldi r24 , low(998)												; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
   ldi r25 , high(998)												; 1 κύκλος (0.125 μsec)
   rcall wait_usec													; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
   pop r25															; 2 κύκλοι (0.250 μsec)
   pop r24															; 2 κύκλοι
   sbiw r24 , 1														; 2 κύκλοι
   brne wait_msec													; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
   ret																; 4 κύκλοι (0.500 μsec)
